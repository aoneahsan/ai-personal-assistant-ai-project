rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - Allow authenticated users to search for other users by email
    // but they can only read/write their own complete profile
    match /pca_users/{userId} {
      // Allow users to read their own complete data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to read basic info of other users for search purposes
      allow read: if request.auth != null;
    }
    
    // Messages collection - users can only access messages from conversations they're part of
    match /pca_messages/{messageId} {
      // Allow reading messages if user is the sender or participant in the conversation
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid in get(/databases/$(database)/documents/pca_conversations/$(resource.data.chatId)).data.participants);
      
      // Allow creating messages if user is the sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
        
      // Allow updating messages if user is the sender (for editing, status updates)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
        
      // Don't allow deleting messages for data integrity
      allow delete: if false;
    }
    
    // Conversations collection - users can only access conversations they're part of
    match /pca_conversations/{conversationId} {
      // Allow reading if user is a participant
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
        
      // Allow creating if user is in the participants list
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
        
      // Allow updating if user is a participant (for last message, unread counts, etc.)
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.participants;
        
      // Don't allow deleting conversations for data integrity
      allow delete: if false;
    }
    
    // Embed configurations - only embed owners can manage their embeds
    match /pca_embeds/{embedId} {
      // Allow reading embed configs for validation (needed for widget)
      allow read: if true;
      
      // Allow creating embeds if user is authenticated and is the owner
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // Allow updating embeds if user is the owner
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      // Allow deleting embeds if user is the owner
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Embed conversations - allow embed owners and visitors to access
    match /pca_embed_conversations/{conversationId} {
      // Allow reading if user is the embed owner
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.ownerUserId;
        
      // Allow creating conversations for embed widgets (no auth required for visitors)
      allow create: if true;
        
      // Allow updating conversations for both owners and visitors
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.ownerUserId;
        
      // Don't allow deleting conversations for data integrity
      allow delete: if false;
    }
    
    // Embed messages - allow embed owners and visitors to send/receive messages
    match /pca_embed_messages/{messageId} {
      // Allow reading messages if user is the embed owner or in the conversation
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == get(/databases/$(database)/documents/pca_embed_conversations/$(resource.data.chatId)).data.ownerUserId);
      
      // Allow creating messages for embed conversations (no auth required for visitors)
      allow create: if true;
        
      // Allow updating messages if user is the sender
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
        
      // Don't allow deleting messages for data integrity
      allow delete: if false;
    }
    
    // Feedback collection - allow authenticated users to create feedback
    match /user_feedback/{feedbackId} {
      // Allow authenticated users to create feedback
      allow create: if request.auth != null;
      
      // Allow users to read their own feedback
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins or system can read all feedback (you can add admin role check here)
      // For now, we'll keep it simple and only allow creation
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}