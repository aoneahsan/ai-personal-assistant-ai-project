rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - Allow authenticated users to search for other users by email
    // but they can only read/write their own complete profile
    match /pca_users/{userId} {
      // Allow users to read their own complete data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to read basic info of other users for search purposes
      allow read: if request.auth != null;
    }
    
    // Messages collection - users can only access messages from conversations they're part of
    match /pca_messages/{messageId} {
      // Allow reading messages if user is authenticated and is part of the conversation
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId ||
         request.auth.uid in get(/databases/$(database)/documents/pca_conversations/$(resource.data.chatId)).data.participants);
      
      // Allow creating messages if user is authenticated and is the sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
        
      // Allow updating messages if user is the sender (for editing, status updates)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
        
      // Don't allow deleting messages for data integrity
      allow delete: if false;
    }
    
    // Conversations collection - users can only access conversations they're part of
    match /pca_conversations/{conversationId} {
      // Allow reading if user is authenticated and is a participant
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == resource.data.createdBy);
        
      // Allow creating if user is authenticated and is the creator
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy &&
        request.auth.uid in request.resource.data.participants;
        
      // Allow updating if user is authenticated and is a participant
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == resource.data.createdBy);
        
      // Don't allow deleting conversations for data integrity
      allow delete: if false;
    }
    
    // Embed configurations - only embed owners can manage their embeds
    match /pca_embeds/{embedId} {
      // Allow reading embed configs for validation (needed for widget)
      allow read: if true;
      
      // Allow creating embeds if user is authenticated and is the owner
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // Allow updating embeds if user is the owner
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      // Allow deleting embeds if user is the owner
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Embed conversations - allow embed owners and visitors to access
    match /pca_embed_conversations/{conversationId} {
      // Allow reading if user is the embed owner
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.ownerUserId;
        
      // Allow creating conversations for embed widgets (no auth required for visitors)
      allow create: if true;
        
      // Allow updating conversations for both owners and visitors
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.ownerUserId;
        
      // Don't allow deleting conversations for data integrity
      allow delete: if false;
    }
    
    // Embed messages - allow embed owners and visitors to send/receive messages
    match /pca_embed_messages/{messageId} {
      // Allow reading messages if user is the embed owner or in the conversation
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == get(/databases/$(database)/documents/pca_embed_conversations/$(resource.data.chatId)).data.ownerUserId);
      
      // Allow creating messages for embed conversations (no auth required for visitors)
      allow create: if true;
        
      // Allow updating messages if user is the sender
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
        
      // Don't allow deleting messages for data integrity
      allow delete: if false;
    }
    
    // Feedback collection - allow authenticated users to create feedback
    match /user_feedback/{feedbackId} {
      // Allow authenticated users to create feedback
      allow create: if request.auth != null;
      
      // Allow users to read their own feedback
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins or system can read all feedback (you can add admin role check here)
      // For now, we'll keep it simple and only allow creation
    }

    // Feedback Embed Configurations - only embed owners can manage their embeds
    match /pca_feedback_embed_configs/{configId} {
      // Allow public read access for embed validation (needed for embed widget)
      // But only active embeds can be read publicly
      allow read: if resource.data.isActive == true;
      
      // Allow authenticated users to read their own embed configs (all configs)
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow creating embed configs if user is authenticated and is the owner
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // Allow updating embed configs if user is the owner
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
        
      // Allow deleting embed configs if user is the owner
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // Feedback Embed Submissions - allow anonymous submissions but only owners can read
    match /pca_feedback_embed_submissions/{submissionId} {
      // Allow anyone to create feedback submissions (for embed widgets)
      allow create: if true;
      
      // Allow authenticated users to read submissions 
      // (the service will filter by embedId and check ownership)
      allow read: if request.auth != null;
      
      // Don't allow updating or deleting submissions for data integrity
      allow update, delete: if false;
    }

    // System Configuration Collections - Public read access, admin write access
    // System Roles - public read access for app functionality, admin write access
    match /system_roles/{roleId} {
      // Allow everyone to read system roles (needed for app functionality)
      allow read: if true;
      
      // Allow admin users to manage roles (check if user has admin role)
      allow write: if request.auth != null && isAdminUser();
    }
    
    // System Permissions - public read access for app functionality, admin write access
    match /system_permissions/{permissionId} {
      // Allow everyone to read system permissions (needed for app functionality)
      allow read: if true;
      
      // Allow admin users to manage permissions
      allow write: if request.auth != null && isAdminUser();
    }
    
    // System Subscription Plans - public read access for pricing pages, admin write access
    match /system_subscription_plans/{planId} {
      // Allow everyone to read subscription plans (needed for public pricing pages)
      allow read: if true;
      
      // Allow admin users to manage subscription plans
      allow write: if request.auth != null && isAdminUser();
    }
    
    // System Feature Flags - public read access for app functionality, admin write access
    match /system_feature_flags/{flagId} {
      // Allow everyone to read feature flags (needed for app functionality)
      allow read: if true;
      
      // Allow admin users to manage feature flags
      allow write: if request.auth != null && isAdminUser();
    }
    
    // System Settings - public read access for app functionality, admin write access
    match /system_settings/{settingId} {
      // Allow everyone to read system settings (needed for app functionality)
      allow read: if true;
      
      // Allow admin users to manage system settings
      allow write: if request.auth != null && isAdminUser();
    }

    // Admin Settings - allow authenticated users to read admin settings, admin write access
    match /pca_admin_settings/{settingId} {
      // Allow authenticated users to read admin settings (needed for app functionality)
      allow read: if request.auth != null;
      
      // Allow admin users to manage admin settings
      allow write: if request.auth != null && isAdminUser();
    }

    // Voice Call Collections - allow authenticated users to manage their voice calls
    match /pca_voice_calls/{callId} {
      // Allow authenticated users to read/write voice calls they're part of
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.initiatorId || 
         request.auth.uid == resource.data.receiverId);
      
      // Allow creating voice calls if user is authenticated and is the initiator
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.initiatorId;
    }

    // Voice Call Signals - allow authenticated users to manage their call signals
    match /pca_voice_call_signals/{signalId} {
      // Allow authenticated users to read/write signals for their calls
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      
      // Allow creating signals if user is authenticated and is the sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }

    // Subscription Requests - users can manage their own requests, admins can manage all
    match /pca_subscription_requests/{requestId} {
      // Allow users to read their own subscription requests
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdminUser());
      
      // Allow users to create their own subscription requests
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow users to update their own requests (cancel), admins can update any
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdminUser());
      
      // Only admins can delete requests
      allow delete: if request.auth != null && isAdminUser();
    }

    // Helper function to check if user is an admin
    function isAdminUser() {
      // Check if user has admin role in their user document
      // This is a simplified check - you might want to make this more robust
      return get(/databases/$(database)/documents/pca_users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }

    // Helper function to get embed owner by embedId
    function getEmbedOwner(embedId) {
      // Query the embed config to get the owner
      return get(/databases/$(database)/documents/pca_feedback_embed_configs/$(embedId)).data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}